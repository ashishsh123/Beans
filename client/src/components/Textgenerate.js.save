import React, { useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { faBars } from "@fortawesome/free-solid-svg-icons";

// import gptLogo from "../assets/chatgpt.svg";
import sendBtn from "../assets/send.svg";
import userIcon from "../assets/user-icon.png";
import gptImgLogo from "../assets/chatgptLogo.svg";
import beans from "../assets/coffee-beans-logo_25818-2.jpg";

const Textgenerate = () => {
  const [inputText, setInputText] = useState("");
  const [taskSelected, setTaskSelected] = useState("");
  const [genreSelected, setGenreSelected] = useState("");
  const [writingStyleSelected, setWritingStyleSelected] = useState("");
  const [natureSelected, setNatureSelected] = useState("");
  const [editorialSelected, setEditorialSelected] = useState("");
  const [toneselected, setToneSelected] = useState("");
  const [prompt, setPrompt] = useState("");
  const [output, setOutput] = useState([]);
  const [sidebarVisible, setSidebarVisible] = useState(true);

  const icon = (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      className="bi bi-rocket-fill icon"
      viewBox="0 0 16 16"
    >
      <path d="M10.175 1.991c.81 1.312 1.583 3.43 1.778 6.819l1.5 1.83A2.5 2.5 0 0 1 14 12.202V15.5a.5.5 0 0 1-.9.3l-1.125-1.5c-.166-.222-.42-.4-.752-.57-.214-.108-.414-.192-.627-.282l-.196-.083C9.7 13.793 8.85 14 8 14c-.85 0-1.7-.207-2.4-.635-.068.03-.133.057-.198.084-.211.089-.411.173-.625.281-.332.17-.586.348-.752.57L2.9 15.8a.5.5 0 0 1-.9-.3v-3.298a2.5 2.5 0 0 1 .548-1.562l.004-.005L4.049 8.81c.197-3.323.969-5.434 1.774-6.756.466-.767.94-1.262 1.31-1.57a3.67 3.67 0 0 1 .601-.41A.549.549 0 0 1 8 0c.101 0 .17.027.25.064.037.017.086.041.145.075.118.066.277.167.463.315.373.297.85.779 1.317 1.537ZM9.5 6c0-1.105-.672-2-1.5-2s-1.5.895-1.5 2S7.172 8 8 8s1.5-.895 1.5-2" />
      <path d="M8 14.5c.5 0 .999-.046 1.479-.139L8.4 15.8a.5.5 0 0 1-.8 0l-1.079-1.439c.48.093.98.139 1.479.139" />
    </svg>
  );
  const handleToggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };
  const handleGenerateContent = async () => {
    const prompt = `consider yourself as subject expert of ${genreSelected} and ${editorialSelected} ${natureSelected} aspects of ${inputText} in style of ${writingStyleSelected} in ${toneselected} tone.`;
    setPrompt(prompt);
    const requestData = { prompt: prompt };
    setInputText("");
    try {
      const response = await fetch("http://.8a.5.5 0 0 1-.8 0l-1.079-1.439c.48.093.98.139 1.479.139" />
    </svg>
  );
  const handleToggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };
  const handleGenerateContent = async () => {
    const prompt = `consider yourself as subject expert of ${genreSelected} and ${editorialSelected} ${natureSelected} aspects of ${inputText} in style of ${writingStyleSe>
    setPrompt(prompt);
    const requestData = { prompt: prompt };
    setInputText("");
    try {
                             method: "POST",
        headers: {

          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const data = await response.json();
        const paragraphs =
          typeof data.summary === "string"
            ? data.summary.split("\n")
            : data.summary;
        const summaryWithCheckboxes = paragraphs.map((paragraph, index) => (
          <div key={index} style={{ marginBottom: "10px" }}>
            {paragraph.trim() && ( // Only render if the paragraph is not empty after trimming whitespace
              <>
                <input
                  className="form-check-input"
                  type="checkbox"
                  id={`checkbox${index}`}
                  value=""
                  aria-label="..."
                />
                <span style={{ marginLeft: "5px" }}>{paragraph}</span>
              </>
            )}
          </div>
        ));
        setOutput(summaryWithCheckboxes);
        console.log(data.summary);
      } else {
        console.error("Error generating content");
      }
    } catch (error) {
      console.error("An error occurred:", error);
    } finally {
    }
  };

  ////////////////////////////////////////////////////////////////////////////////////////////////

  const handlePalmGenerateContent = async () => {
    const prompt = `consider yourself as subject expert of ${genreSelected} and ${editorialSelected} ${natureSelected} aspects of ${inputText} in style of ${writingStyleSelected} in ${toneselected} tone.`;
    setPrompt(prompt);
    const requestData = { prompt: prompt };
    setInputText("");

    console.log(JSON.stringify(requestData));
    try {
      const response = await fetch("http://localhost:3001/generate-text", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const data = await response.json();
        const paragraphs =
          typeof data.summary === "string"
            ? data.summary.split("\n")
            : data.summary;
        const summaryWithCheckboxes = paragraphs.map((paragraph, index) => (
          <div key={index} style={{ marginBottom: "10px" }}>
            {paragraph.trim() && ( // Only render if the paragraph is not empty after trimming whitespace
              <>
                <input
                  className="form-check-input"
                  type="checkbox"
                  id={`checkbox${index}`}
                  value=""
                  aria-label="..."
                />
                <span style={{ marginLeft: "5px" }}>{paragraph}</span>
              </>
            )}
          </div>
        ));
        setOutput(summaryWithCheckboxes);
        // setOutput(data.summary);

        console.log(data.summary);
      } else {
        console.error("Error generating content");
      }
    } catch (error) {
      console.error("An error occurred:", error);
    } finally {
    }
  };

  /////////////////////////////////////////////////////////////////////////////////////////

  const handleClaudeGenerateContent = async () => {
    const prompt = `consider yourself as subject expert of ${genreSelected} and ${editorialSelected} ${natureSelected} aspects of ${inputText} in style of ${writingStyleSelected} in ${toneselected} tone.`;
    setPrompt(prompt);
    const requestData = { prompt: prompt };
    setInputText("");

    console.log(JSON.stringify(requestData));
    try {
      const response = await fetch("http://localhost:3001/invoke-model", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const data = await response.json();
        const paragraphs =
          typeof data.summary === "string"
            ? data.summary.split("\n")
            : data.summary;
        const summaryWithCheckboxes = paragraphs.map((paragraph, index) => (
          <div key={index} style={{ marginBottom: "10px" }}>
            {paragraph.trim() && ( // Only render if the paragraph is not empty after trimming whitespace
              <>
                <input
                  className="form-check-input"
                  type="checkbox"
                  id={`checkbox${index}`}
                  value=""
                  aria-label="..."
                />
                <span style={{ marginLeft: "5px" }}>{paragraph}</span>
              </>
            )}
          </div>
        ));
        setOutput(summaryWithCheckboxes);
        // setOutput(data.summary);

        console.log(data.summary);
      } else {
        console.error("Error generating content");
      }
    } catch (error) {
      console.error("An error occurred:", error);
    } finally {
    }
  };

  ///////////////////////////////////////////////////////////////////////////////////////////////
  return (
    <div className="App">
      <div className={`sideBar ${sidebarVisible ? "visible" : "hidden"}`}>
        <div className="upperSide">
          <div className="upperSideTop">
            <img src={beans} alt="" className="logo"></img>
            {/* <span className="brand">Beans</span> */}

            <button
              type="button"
              className="btn btn-primary btn-lg w-75"
              onClick={() => {
                window.location.reload();
              }}
            >
              R E S E T
            </button>
          </div>

          <div className="upperSideBottom">
            <div>
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setTaskSelected(e.target.value)}
                style={{
                  color: taskSelected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark">
                  what are you looking for
                </option>
                <option value="Generate" className="text-dark">
                  Generate
                </option>
                <option value="Profanity Check" className="text-dark">
                  Profanity Check
                </option>
                <option value="Jargon and Obscure Word" className="text-dark">
                  Jargon and Obscure Word
                </option>
                <option value="Buzzwords and Clichés" className="text-dark">
                  Buzzwords and Clichés
                </option>
                <option value="Proof Read" className="text-dark">
                  Proof Read
                </option>
                <option
                  value="Reset the length of content"
                  className="text-dark"
                >
                  Reset the length of content
                </option>
              </select>
            </div>
            {/*---------------------------------------------------------*/}
            <div>
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setGenreSelected(e.target.value)}
                style={{
                  color: genreSelected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark">
                  Genres
                </option>
                <option value="Current Events" className="text-dark">
                  Current Events
                </option>
                <option value="Policy and Governance" className="text-dark">
                  Policy and Governance
                </option>
                <option value="Technology" className="text-dark">
                  Technology
                </option>
                <option value="Health and Wellness" className="text-dark">
                  Health and Wellness
                </option>
                <option value="Education" className="text-dark">
                  Education
                </option>
                <option value="Environment" className="text-dark">
                  Environment
                </option>
                <option value="Culture and Arts" className="text-dark">
                  Culture and Arts
                </option>
                <option value="Social Issues" className="text-dark">
                  Social Issues
                </option>
                <option value="Sports" className="text-dark">
                  Sports
                </option>
              </select>
            </div>{" "}
            {/*---------------------------------------------------------*/}
            <div className="">
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setNatureSelected(e.target.value)}
                style={{
                  color: natureSelected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark">
                  Nature of Article
                </option>
                <option value="Political" className="text-dark">
                  Political
                </option>
                <option value="Investigative" className="text-dark">
                  Investigative
                </option>
                <option value="Reporting in-depth" className="text-dark">
                  Reporting in-depth
                </option>
                <option value="Gossip" className="text-dark">
                  Gossip
                </option>
                <option value="Humorous" className="text-dark">
                  Humorous
                </option>
                <option value="Blog / Essay" className="text-dark">
                  Blog / Essay
                </option>
                <option value="Personality / Profile" className="text-dark">
                  Personality / Profile
                </option>
                <option value="Advice" className="text-dark">
                  Advice
                </option>
                <option value="Editorial" className="text-dark">
                  Editorial
                </option>
                <option
                  value="Critical/Judgemental/Analysis"
                  className="text-dark"
                >
                  Critical/Judgemental/Analysis
                </option>
                <option value="Review - Book or Movie" className="text-dark">
                  Review - Book or Movie
                </option>
                <option value="Food Columns" className="text-dark">
                  Food Columns
                </option>
                <option
                  value="View / Counter-View (Point)"
                  className="text-dark"
                >
                  View / Counter-View (Point)
                </option>
                <option
                  value="Explanation or recommendation"
                  className="text-dark"
                >
                  Explanation or recommendation
                </option>
                <option value="Quotation and facts" className="text-dark">
                  Quotation and facts
                </option>
                <option value="Opening Remark/thesis" className="text-dark">
                  Opening Remark/thesis
                </option>
                <option value="Objective explanation" className="text-dark">
                  Objective explanation
                </option>
                <option
                  value="Analogies/history/examples"
                  className="text-dark"
                >
                  Analogies/history/examples
                </option>
                <option value="Set up example" className="text-dark">
                  Set up example
                </option>
              </select>
            </div>
            {/*--------------------------------------------------------*/}
            <div>
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setEditorialSelected(e.target.value)}
                style={{
                  color: editorialSelected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark ">
                  Editorial Will
                </option>
                <option value="Explain or Interpret" className="text-dark">
                  Explain or Interpret
                </option>
                <option
                  value="Critical Analysis or review"
                  className="text-dark"
                >
                  Critical Analysis or review
                </option>
                <option value="Persuade or reform" className="text-dark">
                  Persuade or reform
                </option>
                <option value="Recommend" className="text-dark">
                  Recommend
                </option>
                <option value="Opinion" className="text-dark">
                  Opinion
                </option>
                <option value="Elaborate" className="text-dark">
                  Elaborate{" "}
                </option>
                <option
                  value="Infer or deduce or conclude"
                  className="text-dark"
                >
                  Infer or deduce or conclude
                </option>
                <option value="List " className="text-dark">
                  List{" "}
                </option>
                <option value="Narrow down focus" className="text-dark">
                  Narrow down focus
                </option>
                <option value="Outline" className="text-dark">
                  Outline
                </option>
                <option value="Predict" className="text-dark">
                  Predict
                </option>
                <option value="Produce" className="text-dark">
                  Produce
                </option>
                <option value="Propose" className="text-dark">
                  Propose
                </option>
                <option value="Rephrase" className="text-dark">
                  Rephrase
                </option>
                <option value="reword" className="text-dark">
                  reword
                </option>
                <option value="Sum up" className="text-dark">
                  Sum up{" "}
                </option>
                <option value="Summarise" className="text-dark">
                  Summarise
                </option>
                <option value="Suggest " className="text-dark">
                  Suggest{" "}
                </option>
                <option value="Translate" className="text-dark">
                  Translate
                </option>
                <option value="Argue" className="text-dark">
                  Argue
                </option>
                <option value="combine" className="text-dark">
                  combine
                </option>
                <option value="Compare" className="text-dark">
                  Compare
                </option>
                <option value="Differentiate" className="text-dark">
                  Differentiate{" "}
                </option>
                <option value="Discuss" className="text-dark">
                  Discuss{" "}
                </option>
              </select>
            </div>
            {/*---------------------------------------------------------*/}
            <div>
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setWritingStyleSelected(e.target.value)}
                style={{
                  color: writingStyleSelected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark">
                  Preferred Writing Style
                </option>
                <option value="Narrative" className="text-dark">
                  Narrative
                </option>
                <option value="Descriptive" className="text-dark">
                  Descriptive
                </option>
                <option value="Expository" className="text-dark">
                  Expository
                </option>
                <option value="Persuasive" className="text-dark">
                  Persuasive
                </option>
                <option value="Creative" className="text-dark">
                  Creative
                </option>
                <option value="Objective" className="text-dark">
                  Objective
                </option>
                <option value="Subjective" className="text-dark">
                  Subjective
                </option>
                <option value="Review" className="text-dark">
                  Review
                </option>
                <option value="Poetic" className="text-dark">
                  Poetic
                </option>
                <option value="Technical" className="text-dark">
                  Technical
                </option>
              </select>
            </div>
            {/*---------------------------------------------------------*/}
            <div>
              <select
                className="form-select w-75"
                aria-label="Default select example"
                onChange={(e) => setToneSelected(e.target.value)}
                style={{
                  color: toneselected === "" ? "white" : "white",
                }}
              >
                <option disabled selected className="text-dark">
                  Tone of the Aricle
                </option>
                <option value="Positve" className="text-dark">
                  Positve
                </option>
                <option value="Negative" className="text-dark">
                  Negative
                </option>
                <option value="Neutral" className="text-dark">
                  Neutral
                </option>
              </select>
            </div>
            {/*---------------------------------------------------------*/}
          </div>
        </div>
      </div>

      <div className="main" style={{ marginLeft: sidebarVisible ? "" : "40%" }}>
        {/* <FontAwesomeIcon
          icon={faBars}
          size="2xl"
          // style={{ left: "310px", top: "10px", position: "absolute" }}
          style={{
            left: sidebarVisible ? "300px" : "2px",
            position: sidebarVisible ? "absolute" : "fixed",
            zIndex: "1000",
            top: sidebarVisible ? "0px" : "0px",
            cursor: "pointer",
          }}
          onClick={handleToggleSidebar}
        /> */}
        <div className="lowerSide">
          <button
            type="button"
            className="btn btn-success engine-btn w-25 "
            onClick={handleGenerateContent}
          >
            {icon}
            Engine-1
          </button>
          <button
            type="button"
            className="btn btn-success engine-btn w-25"
            onClick={handlePalmGenerateContent}
          >
            {icon}
            Engine-2
          </button>
          <button
            type="button"
            className="btn btn-success engine-btn w-25"
            onClick={handleClaudeGenerateContent}
          >
            {icon}
            Engine-3
          </button>
        </div>

        <div className="chats">
          {prompt && (
            <div className="chat">
              <img className="chatImg" src={userIcon} alt="text" />
              <p className="txt">{prompt}</p>
            </div>
          )}
          {output.length > 0 && (
            <div className="chat bot">
              <img className="chatImg" src={gptImgLogo} alt="text" />

              <p className="txt">
                {output.map((paragraphWithCheckbox, index) => (
                  <div key={index}>{paragraphWithCheckbox}</div>
                ))}
              </p>
            </div>
          )}
        </div>
        <div className="chatFooter">
          <div className="inputBox">
            <input
              type="text"
              placeholder="Send a message"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
            />
            <button className="send">
              <img src={sendBtn} alt="Send"></img>
            </button>
          </div>
          <p>
            Beans may produce inaccurate information about people , place , or
            facts.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Textgenerate;
